#!/usr/bin/env bash

set -o errexit
set -o pipefail

DC="${DC:-exec}"

# If we're running in CI we need to disable TTY allocation for docker compose
# commands that enable it by default, such as exec and run.
TTY="${TTY:-}"
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

_dc() {
  # shellcheck disable=SC2086
  docker compose "${DC}" ${TTY} "${@}"
}

_dc_run() {
  DC="run" _dc --no-deps --rm "${@}"
}

# -----------------------------------------------------------------------------

cmd() {
  # Run any command you want in the web container
  _dc web "${@}"
}

flask() {
  # Run any Flask commands
  cmd flask "${@}"
}

shell() {
  # Start a shell session in the web container
  cmd bash "${@}"
}

psql() {
  # Connect to PostgreSQL
  # shellcheck disable=SC1091
  . .env
  _dc postgres psql -U "${POSTGRES_USER}" "${@}"
}

redis-cli() {
  # Connect to Redis
  _dc redis redis-cli "${@}"
}

deps:install() {
  # Install back-end and / or front-end dependencies
  local no_build="${1:-}"

  [ -z "${no_build}" ] && docker compose down && docker compose build

  _dc_run js yarn install
  _dc_run web bin/uv-install
}

uv() {
  # Run any uv commands
  cmd uv "${@}"
}

uv:outdated() {
  # List any installed packages that are outdated
  _dc_run web uv tree --outdated --depth 1 "${@}"
}

yarn() {
  # Run any yarn commands
  _dc js yarn "${@}"
}

yarn:outdated() {
  # List any installed packages that are outdated
  _dc_run js yarn outdated
}

yarn:build:js() {
  # Build JS assets, this is meant to be run from within the assets container
  mkdir -p ../public/js
  node esbuild.config.mjs
}

yarn:build:css() {
  # if [ "${NODE_ENV}" != "production" ]; then
  #   mkdir -p ../public
  #   ln -sf css ../public/css
  # else
  #   mkdir -p ../public/css
  #   cp css/* ../public/css/
  # fi
  mkdir -p ../public/css
  cp css/* ../public/css/
  node css-watch.mjs
}

clean() {
  # Remove cache and other machine generates files
  rm -rf public/*.* public/js public/css public/images public/svg public/fonts \
    celerybeat-schedule

  touch public/.keep
}


help() {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
